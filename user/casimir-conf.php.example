<?php
// Instance name
define('INSTANCE_NAME', 'Cas.im/ir');

// Meta tags
define('TITLE', INSTANCE_NAME . ' - URL shortener');
define('DESCRIPTION', 'Open source URL shortener');

// DB connection
define('DB_URL', 'mysql:host=localhost;dbname=casimir_db');
define('DB_USER', 'casimir_user');
define('DB_PASSWORD', 'secret');
// Only MySQL and PostgreSQL were tested, but theoretically, any database
// supported by your PHP PDO installation should work, like SQLite, Oracle, SQL Server, etc.
// define('DB_URL', 'pgsql:host=localhost;dbname=casimir_db');
// define('DB_URL', 'sqlite:/var/lib/casimir.db');
// Check PHP documentation for PDO DSNs for more possible formats for the database URL:
// https://www.php.net/manual/pdo.construct.php

// use mod_rewrite?
define('USE_REWRITE', false);

// restrict access?
define('ACCESS_KEY', '');

// Protect API access by password.
// If reCAPTCHA is enabled, not setting an API_KEY will actually
// disable API. Set it to blank string to allow API users to bypass
// CAPTCHA validation (discouraged).
// define('API_KEY', '');

// Default API format ('text' or 'xml')
define('DEFAULT_API_FORMAT', 'text');

// Use reCAPTCHA service to block spam bots
// Please note that this will disable Casimir API
// Also note that allow_url_fopen and json_encode are required
// define('RECAPTCHA', false);
// Set it to 'hcaptcha' instead to use hCaptcha drop-in replacement
// You would still need an hCaptcha key and secret:
// https://dashboard.hcaptcha.com/signup
define('RECAPTCHA', 'hcaptcha');
// Use SSL to validate reCAPTCHA response. It's the preferred method
// since it's more secure to transmit your private key, but may require
// additional PHP dependencies
define('RECAPTCHA_HTTPS', true);
// Your reCaptcha public key as provided by recaptcha.net
define('RECAPTCHA_KEY', 'your-public-key');
// Your reCaptcha secret key as provided by recaptcha.net
define('RECAPTCHA_SECRET', 'your-private-key');
